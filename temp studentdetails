package com.example.accountmanagementapp;



import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.telecom.Call;
import android.util.Base64;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class Student_details extends AppCompatActivity {
    private static final int PICK_IMAGE_REQUEST = 1;
    private EditText Name,email,phone,roll,aadhar,section;
    private Button buttonChoose,buttonUpload,next;
    private TextView details;
    private ImageView imageView;
    private Bitmap bitmap;
    public static final String UPLOAD_KEY = "image";
    public static final String TAG = "MY MESSAGE";
    private Uri filePath;

    private static String DETAILS_URL ="http://192.168.1.4/details.php";
    private static String UPLOAD_URL ="http://192.168.1.4/upload.php";

    @SuppressLint("MissingInflatedId")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_student_details);


        Name = findViewById(R.id.Name);
        email = findViewById(R.id.email);
        phone = findViewById(R.id.phone);
        aadhar = findViewById(R.id.aadhar);
        section = findViewById(R.id.section);
        roll = findViewById(R.id.roll);
        details = findViewById(R.id.details);
        buttonChoose = findViewById(R.id.buttonChoose);
        buttonUpload = findViewById(R.id.buttonUpload);
        next = findViewById(R.id.next);
        imageView = findViewById(R.id.imageView);

        buttonChoose.setOnClickListener(new View.OnClickListener() {


            @Override
            public void onClick(View v) {
                showFileChooser();



            }
        });


        next.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Details();
            }

        });

        buttonUpload.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                    if (v == buttonChoose) {
                        showFileChooser();
                    }
                    if(v == buttonUpload) {
                        uploadImage();
                    }
            }
        });


        details.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(Student_details.this,login.class));
            }
        });

    }

    private void showFileChooser() {
        Intent intent = new Intent();
        intent.setType("image/*");
        intent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(Intent.createChooser(intent, "Select Picture"), PICK_IMAGE_REQUEST);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == PICK_IMAGE_REQUEST && resultCode == RESULT_OK && data != null && data.getData() != null) {

            filePath = data.getData();
            try {
                bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), filePath);
                imageView.setImageBitmap(bitmap);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    public String getStringImage(Bitmap bmp){
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bmp.compress(Bitmap.CompressFormat.JPEG, 100, baos);
        byte[] imageBytes = baos.toByteArray();
        String encodedImage = Base64.encodeToString(imageBytes, Base64.DEFAULT);
        return encodedImage;
    }
    private void uploadImage(){
        class UploadImage extends AsyncTask<Bitmap,Void,String> {

            ProgressDialog loading;
            RequestHandler rh = new RequestHandler();

            @Override
            protected void onPreExecute() {
                super.onPreExecute();
                loading = ProgressDialog.show(Student_details.this, "Uploading Image", "Please wait...",true,true);
            }

            @Override
            protected void onPostExecute(String s) {
                super.onPostExecute(s);
                loading.dismiss();
                Toast.makeText(getApplicationContext(),s,Toast.LENGTH_LONG).show();
            }

            @Override
            protected String doInBackground(Bitmap... params) {
                Bitmap bitmap = params[0];
                String uploadImage = getStringImage(bitmap);

                HashMap<String,String> data = new HashMap<>();
                data.put(UPLOAD_KEY, uploadImage);

                String result = rh.sendPostRequest(UPLOAD_URL,data);

                return result;
            }
        }

        UploadImage ui = new UploadImage();
        ui.execute(bitmap);
    }




    public void Details() {
        next.setVisibility(View.GONE);


        final String Name = this.Name.getText().toString().trim();
        final String email = this.email.getText().toString().trim();

        final String phone = this.phone.getText().toString().trim();
        final String roll = this.roll.getText().toString().trim();
        final String aadhar = this.aadhar.getText().toString().trim();
        final String section = this.section.getText().toString().trim();


        StringRequest stringRequest = new StringRequest(Request.Method.POST, DETAILS_URL,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        try {
                            JSONObject jsonObject = new JSONObject(response);
                            String success = jsonObject.getString("success");


                            if (success.equals("1")) {
                                Toast.makeText(Student_details.this, "registration successful", Toast.LENGTH_SHORT).show();
                                Intent intent = new Intent(Student_details.this, login.class);
                                startActivity(intent);
                            }

                        }


                        catch (JSONException e) {

                            e.printStackTrace();
                            Toast.makeText(Student_details.this, "Email / aadhar card already exist",Toast.LENGTH_SHORT).show();

                           next.setVisibility(View.VISIBLE);
                        }


                    }
                },


                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Toast.makeText(Student_details.this, "registration error"+error .toString(),Toast.LENGTH_SHORT).show();
                        next.setVisibility(View.VISIBLE);
                    }
                })
        {
            @Override
            protected Map<String, String> getParams() throws AuthFailureError {
                Map<String, String> params = new HashMap<>();
                params.put("Name",Name);
                params.put("email",email);
                params.put("phone",phone);
                params.put("roll",roll);
                params.put("aadhar",aadhar);
                params.put("section",section);
                return params;

            }

        };
        RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);
    }
}
